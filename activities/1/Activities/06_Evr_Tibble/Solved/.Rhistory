zzz <- "this is a really sleepy variable."
z <- "This is  a sleepy variable."
z <- "This is  a sleepy variable."
zzz <- "this is a really sleepy variable."
540 + 29
540 / 16
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
combinex <- c(disney_characters, presidents)
for (x in combinex){
print(x)
}
numericvex <- 1:length(combinex)
numericvex <- 1:length(combinex):2
students <- c(
"Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia"
)
roll_call <- function(class){
print(Sys.Date())
for (student in class){
print(student)
}
}
students <- c(
"Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia"
)
roll_call(students)
ourClass <- c("Bart", "Ryan L", "Ryan M", "Thomas", "John", "Anna")
roll_call(ourClass)
?sample
sample(3, 4)
locker_combinations <- function(class){
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
locker_combinations(students)
# Part III
for (student in students){
second_letter <- substr(student,2,2)
if (second_letter == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
}
library(dplyr)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
names(precipitation) <- months
# Display precipitation
print(precipitation)
# Access a single member of precipitation by its name
mar_precipitation <- precipitation["Mar"]
precipitation$Mar
# Summary of data
# Display summary data of precipitation
summary(precipitation)
# Store the results in a vector.
precipitation_summary <- summary(precipitation)
precipitation
# Use pipe operators to express a sequence of operations
precipitation %>% summary()
precipitation_summary[["Max."]]
# Access features of a summary
precipitation_summary["Min."]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
sample_csv <- read_csv("data.csv")
View(sample_csv)
head(sample_csv)
View(sample_csv)
View(sample_csv)
setwd("~/Work/Trilogy/VU-VIRT-DATA-PT-03-2022-U-B/Modules/15-R/1/Activities/05_Ins_Tibble/Solved")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(diamonds, package='ggplot2')
nrow(diamonds)
head(diamonds, 10)
slice(diamonds, 30055:30060)
slice(diamonds, c(1,7))
select(diamonds, carat, price)
total_volume <- mutate(diamonds, x * y * z)
total_volume
# In R, variables can contain periods
total.volume2 <- mutate(diamonds, total.volume=(x*y*z))
total.volume2
summarize(diamonds, mean(price))
cut <- group_by(diamonds, cut)
summarize(cut, mean(price), sum(price))
summarize(cut, avg=mean(price),number=n())
cut2 <- group_by(diamonds, cut, color)
cut2_summary <- summarize(cut2, mean(price))
cut2_summary
count(diamonds, cut)
setwd("~/Work/Trilogy/VU-VIRT-DATA-PT-03-2022-U-B/Modules/15-R/1/Activities/06_Evr_Tibble/Solved")
knitr::opts_chunk$set(echo = TRUE)
students <-read_csv("students.csv")
head(students)
students <-read_csv("../students.csv")
students <-read_csv("../Resource/students.csv")
students <-read_csv("students.csv")
head(students)
# unique(dataset$variable) displays unique elements from that column
unique(students$school_name)
# Use length() to identify the number of schools
length(school_count)
school_count <- unique(students$school_name)
# Use length() to identify the number of schools
length(school_count)
paste("There are", length(school_count), "schools")
# nrow() returns the number of rows
student_count <-  nrow(students)
paste("There are a total of", student_count, "students.")
mean_reading_score <- mean(students$reading_score)
paste("The average reading score is", mean_reading_score)
mean_math_score <- summarize(students, mean(math_score))
paste("The average math score is", mean_math_score)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
getPct <- function(Number) {
return(Number/student_count * 100)
}
percentage_passing_reading <- filter(students, reading_score >= 70) %>% nrow() %>% getPct() %>% round(digits = 2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
passing_math <- filter(students, math_score >= 70)
passing_math_count <- nrow(passing_math)
percentage_passing_math <- passing_math_count*100 / student_count
percentage_passing_math <- round(percentage_passing_math, 2)
paste(percentage_passing_math, "% of the students have passing math scores.")
overall_passing <- filter(students, math_score >= 70 & reading_score >= 70)
overall_passing_count <- nrow(overall_passing)
percentage_passing_overall <- overall_passing_count *100 / student_count
percentage_passing_overall <- round(percentage_passing_overall , 2)
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
school_grouping <- group_by(students, school_name)
summarize(school_grouping, avg.reading=mean(reading_score), avg.math = mean(math_score))
grade_grouping <- group_by(students, school_name, grade)
summarize(grade_grouping, avg.reading=mean(reading_score), avg.math=mean(math_score))
q()
